<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/batch 
		http://www.springframework.org/schema/batch/spring-batch-2.1.xsd">

	<context:annotation-config />

	<aop:aspectj-autoproxy />

	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
		<property name="driverClassName" value="org.hsqldb.jdbcDriver" />
		<property name="url" value="jdbc:hsqldb:mem:." />
		<property name="username" value="sa" />
		<property name="password" value="" />
	</bean>

	<bean id="hibernateSessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<value>
				hibernate.dialect=org.hibernate.dialect.HSQLDialect
				hibernate.show_sql=true
				hibernate.use_outer_join=true
				hibernate.jdbc.use_get_generated_keys=false
				hibernate.max_fetch_depth=3
				hibernate.current_session_context_class=org.springframework.orm.hibernate4.SpringSessionContext
			</value>
		</property>
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="hibernateSessionFactory" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<bean id="ti-test.MockItemReader" class="me.andpay.ti.spring.MockItemReader" scope="step" />

	<bean id="ti-test.RollingFileItemWriter" class="me.andpay.ti.spring.batch.RollingFileItemWriter" scope="step">
		<property name="maxRowCount" value="9" />
		<property name="resource" value="file:#{jobParameters['test-file']}" />
		<property name="headerCallback">
			<bean class="me.andpay.ti.spring.MockFileHeaderCallback" />
		</property>
		<property name="footerCallback">
			<bean class="me.andpay.ti.spring.MockFileFooterCallback" />
		</property>
		<property name="lineAggregator">
			<bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
				<property name="fieldExtractor">
					<bean class="me.andpay.ti.spring.MockFieldExtractor" />
				</property>
				<property name="delimiter" value="|" />
			</bean>
		</property>
		<property name="encoding" value="UTF-8" />
	</bean>
	
	<bean id="ti-test.MockItemReader2" class="me.andpay.ti.spring.MockItemReader2" scope="step" />
	
	<bean id="ti-test.PoiExcelSheetItemWriter" class="me.andpay.ti.spring.batch.PoiExcelSheetItemWriter" scope="step">
		<property name="fieldExtractor">
			<bean class="me.andpay.ti.spring.MockFieldExtractor" />
		</property>
		<property name="headerCallback">
			<bean class="me.andpay.ti.spring.MockPoiExcelFileHeaderCallback" />
		</property>
	</bean>
	
	<bean id="ti-test.PoiExcelSheetItemWriter2" class="me.andpay.ti.spring.batch.PoiExcelSheetItemWriter" scope="step">
		<property name="fieldExtractor">
			<bean class="me.andpay.ti.spring.MockFieldExtractor" />
		</property>
		<property name="headerCallback">
			<bean class="me.andpay.ti.spring.MockPoiExcelFileHeaderCallback" />
		</property>
	</bean>
	
	<bean id="ti-test.PoiExcelFileItemWriter" class="me.andpay.ti.spring.batch.PoiExcelFileItemWriter" scope="step">
		<property name="resource" value="file:#{jobParameters['test-file']}" />
		<property name="sheetItemWriters">
			<list>
				<ref local="ti-test.PoiExcelSheetItemWriter" />
				<ref local="ti-test.PoiExcelSheetItemWriter2" />
			</list>	
		</property>
	</bean>

	<bean id="ti-test.JobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
	</bean>

	<bean id="ti-test.JobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="ti-test.JobRepository" />
	</bean>

	<batch:job id="ti-test.RollingDumpJob" job-repository="ti-test.JobRepository">
		<batch:step id="dbToClearTxnDataFile">
			<batch:tasklet>
				<batch:chunk reader="ti-test.MockItemReader" writer="ti-test.RollingFileItemWriter" commit-interval="7" />
			</batch:tasklet>
		</batch:step>
	</batch:job>
	
	<batch:job id="ti-test.PoiExcelJob" job-repository="ti-test.JobRepository">
		<batch:step id="dbToExcel">
			<batch:tasklet>
				<batch:chunk reader="ti-test.MockItemReader2" writer="ti-test.PoiExcelFileItemWriter" commit-interval="7" />
			</batch:tasklet>
		</batch:step>
	</batch:job>

</beans>